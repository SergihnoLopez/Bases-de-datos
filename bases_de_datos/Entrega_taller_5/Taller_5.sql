-- /////////////////////////////////// PRIMER PUNTO /////////////////////////////
DELIMITER ;
DROP TRIGGER IF EXISTS AFTER_INVOICELINE_INSERT ;
DELIMITER %%
CREATE TRIGGER AFTER_INVOICELINE_INSERT AFTER INSERT ON INVOICELINE FOR EACH ROW
BEGIN
UPDATE INVOICE
SET INVOICE.TOTAL = INVOICE.TOTAL + NEW.UNITPRICE* NEW.QUANTITY WHERE INVOICE.INVOICEID = NEW.INVOICEID;
END %%
DELIMITER ;

SELECT * FROM INVOICE WHERE INVOICEID = 5;
INSERT INTO INVOICELINE VALUES(9003, 5, 208, 5.0, 2);
SELECT * FROM INVOICE WHERE INVOICEID = 5;

-- /////////////////////////////////// SEGUNDO PUNTO /////////////////////////////
SET SQL_SAFE_UPDATES = 0;
ALTER TABLE ALBUM ADD DURATION LONG NULL;
SELECT * FROM ALBUM;
DROP VIEW DURATIONALBUM;
CREATE VIEW DURATIONALBUM AS (SELECT TRACK.ALBUMID AS ALBUM, SUM(TRACK.MILLISECONDS) AS DURATIONTOTAL FROM TRACK GROUP BY TRACK.ALBUMID);
SELECT * FROM DURATIONALBUM;
UPDATE ALBUM JOIN DURATIONALBUM ON DURATIONALBUM.ALBUM = ALBUM.ALBUMID SET ALBUM.DURATION = DURATIONALBUM.DURATIONTOTAL;
    

      -- TRIGGER PARA ACTUALIZAR LA DURACION DEL ALBUM DESPUES DE AÑADIR UNA CANCION
DELIMITER ;
DROP TRIGGER IF EXISTS AFTER_TRACK_INSERT ;
DELIMITER %%
CREATE TRIGGER AFTER_TRACK_INSERT AFTER INSERT ON TRACK FOR EACH ROW
BEGIN
UPDATE ALBUM
SET ALBUM.DURATION = ALBUM.DURATION + NEW.MILLISECONDS WHERE ALBUM.ALBUMID = NEW.ALBUMID;
END %%
DELIMITER ;
 SELECT * FROM ALBUM WHERE ALBUM.ALBUMID = 1;
 SELECT * FROM TRACK WHERE TRACK.ALBUMID = 1;
 INSERT INTO `TRACK` (`TRACKID`, `NAME`, `ALBUMID`, `MEDIATYPEID`, `GENREID`, `COMPOSER`, `MILLISECONDS`, `BYTES`, `UNITPRICE`) VALUES (3504, N'SONG OF TEST', 1, 1, 1, N'BRIAN JOHNSON', 206005, 3005164, 0.99);
 DELETE FROM TRACK WHERE TRACK.TRACKID = 3504;

-- /////////////////////////////////// TERCER PUNTO /////////////////////////////

CREATE TABLE `EMPLOYEEAUDIT` -- TABLA EMPLOYEEAUDIT
(
    `EMPLOYEEAUDITID` INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    `EMPLOYEEID` INT,
    `CHANGETYPE` VARCHAR(45) NULL,
    `CHANGEDATE` DATETIME NULL,
    INDEX `EMPLOYEEID` (`EMPLOYEEID` ASC),
	FOREIGN KEY (`EMPLOYEEID`)
	REFERENCES `CHINOOK`.`EMPLOYEE` (`EMPLOYEEID`)
);

DROP TABLE EMPLOYEEAUDIT;
SELECT * FROM EMPLOYEEAUDIT;


DELIMITER ; -- TRIGGER DE INSERCION 
DROP TRIGGER IF EXISTS AFTER_EMPLOYEE_INSERT ;
DELIMITER %%
CREATE TRIGGER AFTER_EMPLOYEE_INSERT AFTER INSERT ON EMPLOYEE FOR EACH ROW
BEGIN
INSERT INTO EMPLOYEEAUDIT (EMPLOYEEID, CHANGETYPE, CHANGEDATE) VALUES (NEW.EMPLOYEEID, "INSERTAR", NOW());
END %%
DELIMITER ;

INSERT INTO `EMPLOYEE` (`EMPLOYEEID`, `LASTNAME`, `FIRSTNAME`, `TITLE`, `REPORTSTO`, `BIRTHDATE`, `HIREDATE`, `ADDRESS`, `CITY`, `STATE`, `COUNTRY`, `POSTALCODE`, `PHONE`, `FAX`, `EMAIL`) VALUES (9, N'TEST', N'LAURA', N'IT STAFF', 6, '1968/1/9', '2004/3/4', N'923 7 ST NW', N'LETHBRIDGE', N'AB', N'CANADA', N'T1H 1Y8', N'+1 (403) 467-3351', N'+1 (403) 467-8772', N'LAURA@CHINOOKCORP.COM');
UPDATE EMPLOYEE SET EMPLOYEE.REPORTSTO = 5 WHERE EMPLOYEE.EMPLOYEEID = 9;
SET FOREIGN_KEY_CHECKS = 0;							-- PERMITE QUE SE PUEDA ELIMINAR UN ELEMENTO DE LA TABLA SIN VALIDAR LAS LLAVES FORÁNEAS
DELETE FROM EMPLOYEE WHERE EMPLOYEE.EMPLOYEEID = 9; -- BORRAR UN EMPLEADO
SET FOREIGN_KEY_CHECKS = 1;							-- ACTIVAR LA VALIDACIÓN DE LLAVES FORÁNEAS (NECESARIO PARA MANTENER LA INTEGRIDAD DE LA TABLA)

DELIMITER ; -- TRIGGER DE ELIMINACION
DROP TRIGGER IF EXISTS AFTER_EMPLOYEE_REMOVE ;
DELIMITER %%
CREATE TRIGGER AFTER_EMPLOYEE_REMOVE AFTER DELETE ON EMPLOYEE FOR EACH ROW
BEGIN
INSERT INTO EMPLOYEEAUDIT (EMPLOYEEID, CHANGETYPE, CHANGEDATE) VALUES (OLD.EMPLOYEEID, "ELIMINAR", NOW());
END %%
DELIMITER ;

DELIMITER ; -- TRIGGER DE MODIFICACION  
DROP TRIGGER IF EXISTS AFTER_EMPLOYEE_UPDATE ;
DELIMITER %%
CREATE TRIGGER AFTER_EMPLOYEE_UPDATE AFTER UPDATE ON EMPLOYEE FOR EACH ROW
BEGIN
INSERT INTO EMPLOYEEAUDIT (EMPLOYEEID, CHANGETYPE, CHANGEDATE) VALUES (NEW.EMPLOYEEID, "MODIFICAR", NOW());
END %%
DELIMITER ;

